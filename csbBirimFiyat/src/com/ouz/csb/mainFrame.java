package com.ouz.csb;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsoup.Connection;

/**
 *
 * @author ouz
 */
public class mainFrame extends javax.swing.JFrame {

    //Sistem sabitleri
    private static String kullaniciAdi = "bayiller8";
    private static String sifre = "11111111";
    private static String detayPozNo = "701-101";
    private static Map<String, String> loginCookies;
    private static Map<String, String> aramaCookies;

    private static final String gonder = "Giri%FE";
    private static final String siteUrl = "http://www.csb.gov.tr/birimfiyat/";
    private static final String logInUrl = "uyeislemleri.php?id=1";
    private static final String cikisUrl = "uyeislemleri.php?id=4";
    private static final String anasayfaUrl = "index.php?Sayfa=ana";
    private static final String aramaUrl = "index.php?Sayfa=arama";
    private static final String aramaDetayUrl = "index.php?Sayfa=aramadetay";
    private static final String kitapUrl = "index.php?Sayfa=kitap";

    // Sistem degiskenleri
    private static String islemMesaj = "";
    private static File okunacakExcel;
    private static File yazilacakExcelFile;
    private static Boolean oturumAcikMi = false;
    private static String girisYapilanKullaniciAdi = "";
    private static Map<String, String[]> data;
    private static XSSFWorkbook yazilacakExcel;
    private static XSSFSheet yazilacakExcelSayfasi;
    private static int indis;
    private static int kullanilanYil;

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();

        // proxy ayarla.
        setProxySettings();
        kullanilanYil = Calendar.getInstance().get(Calendar.YEAR);
        comboDoldur();

        indis = 1;

        data = new TreeMap<String, String[]>();
        data.put("1", new String[]{"Sýra","Poz No", "Konu", "Miktar", "Birim Fiyat", "Montaj"});

        yazilacakExcel = new XSSFWorkbook();

        yazilacakExcelSayfasi = yazilacakExcel.createSheet("Csb_birim_fiyat");
    }

    public mainFrame(String yeniKullaniciAdi, String yeniSifre) {
        initComponents();

        // proxy ayarla.
        setProxySettings();
        kullanilanYil = Calendar.getInstance().get(Calendar.YEAR);
        comboDoldur();

        indis = 1;

        kullaniciAdi = yeniKullaniciAdi;
        sifre = yeniSifre;

        data = new TreeMap<String, String[]>();
        data.put("1", new String[]{"Sýra", "Poz No", "Konu", "Miktar", "Birim Fiyat", "Montaj"});

        yazilacakExcel = new XSSFWorkbook();

        yazilacakExcelSayfasi = yazilacakExcel.createSheet("Csb_birim_fiyat");
    }

    public void comboDoldur() {

        //yilCombo.removeAllItems();
        yilCombo.removeAll();

        for (int i = 0; i < 5; i++) {
            yilCombo.addItem(String.valueOf(kullanilanYil - i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMesaj = new javax.swing.JTextArea();
        btnOturumAc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDosyaAdi = new javax.swing.JTextField();
        btnDosyaSec = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnIslem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        yilCombo = new java.awt.Choice();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("mainFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtMesaj.setColumns(20);
        txtMesaj.setRows(5);
        jScrollPane1.setViewportView(txtMesaj);
        txtMesaj.getAccessibleContext().setAccessibleName("txtMesaj");

        btnOturumAc.setForeground(new java.awt.Color(0, 153, 0));
        btnOturumAc.setText("Oturum Aç");
        btnOturumAc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOturumAcActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Oturum Aç :");

        txtDosyaAdi.setText("Okunacak Dosya Adý ...");

        btnDosyaSec.setText("Seç");
        btnDosyaSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDosyaSecActionPerformed(evt);
            }
        });

        jLabel3.setText("Okunacak Excel Dosyasýný Seçiniz");

        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Bilgilendirme ");

        btnIslem.setBackground(new java.awt.Color(0, 0, 153));
        btnIslem.setFont(new java.awt.Font("Malayalam MN", 0, 13)); // NOI18N
        btnIslem.setForeground(new java.awt.Color(204, 255, 255));
        btnIslem.setText("Ý Þ L E M Ý      B A Þ L A T ");
        btnIslem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIslemActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Yýl Seçiniz :");

        jMenu1.setText("Ayarlar");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setActionCommand("ayarMenu");
        jMenuItem1.setLabel("Farklý Bilgilerle Giriþ Yap");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenuItem1.getAccessibleContext().setAccessibleName("ayarMenu");
        jMenuItem1.getAccessibleContext().setAccessibleDescription("");

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIslem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(12, 12, 12)
                                        .addComponent(btnOturumAc, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(yilCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDosyaAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(btnDosyaSec, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(3, 3, 3))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnOturumAc)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(yilCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDosyaAdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnDosyaSec))
                .addGap(21, 21, 21)
                .addComponent(btnIslem)
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtDosyaAdi.getAccessibleContext().setAccessibleName("txtDosyaAdi");
        btnDosyaSec.getAccessibleContext().setAccessibleName("btnDosyaSec");

        getAccessibleContext().setAccessibleName("mainFrame");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Oturum aç butonuna basildiginda sayfada oturum açýlmasý için çalýþacak
     * olan method.
     *
     * @param evt
     */
    private void btnOturumAcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOturumAcActionPerformed

        String sonuc = "";

        if (girisYapilanKullaniciAdi.length() <= 0 && !oturumAcikMi) {
            try {
                sonuc = logIn();
            } catch (MalformedURLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            sonuc = girisYapilanKullaniciAdi;
        }

        if (!sonuc.equalsIgnoreCase(kullaniciAdi)) {
            islemMesaj += "Sisteme Giriþ Yapýlamadý !\nHata : " + sonuc + "\n";

            JOptionPane.showMessageDialog(null, "Sisteme Giriþ Yapýlamadý !\nHata : " + sonuc, " InfoBox: " + " HATA ", JOptionPane.ERROR_MESSAGE);

            oturumAcikMi = false;

        } else {
            System.out.println("Arama için haziriz !");

            islemMesaj += "GÝRÝÞ BAÞARILI ! : " + sonuc + "\n";
            JOptionPane.showMessageDialog(null, "GÝRÝÞ BAÞARILI !: " + sonuc + "\n", " Bilgilendirme ", JOptionPane.INFORMATION_MESSAGE);
            oturumAcikMi = true;
        }

        txtMesaj.setText(islemMesaj);
    }//GEN-LAST:event_btnOturumAcActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        islemMesaj += " Cýkýþ yapýlarak sistem kapatýlýyor lütfen bekleyiniz !\n";
        txtMesaj.setText(islemMesaj);

        cikisYap();
        oturumAcikMi = false;
    }//GEN-LAST:event_formWindowClosed

    /**
     * Proje kodlarinin okunacagi excel dosyasini sececek olan method
     *
     * @param evt
     */
    private void btnDosyaSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDosyaSecActionPerformed

        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Excel Dosyalarý", "xlsx", "xls");
        fc.addChoosableFileFilter(filter);

        int dialogResult = fc.showOpenDialog(null);

        if (dialogResult == JFileChooser.OPEN_DIALOG) {
            // System.out.println("Dialog acildi !");

            if (dialogResult == JFileChooser.APPROVE_OPTION) {
                okunacakExcel = fc.getSelectedFile();
                txtDosyaAdi.setText(fc.getSelectedFile().getName());
                islemMesaj += "Okunacak Excel dosyasý seçildi : " + fc.getSelectedFile().getAbsolutePath() + "\n";
                txtMesaj.setText(islemMesaj);
            }
        }

    }//GEN-LAST:event_btnDosyaSecActionPerformed

    /**
     * okunacak excel dosyasindan kodlari okuyacak, ilgili proje kodlari için
     * arama yapacak ve arama sonuçlarýný yazilacak olarak seçilen excele
     * yazacak olan method
     *
     * @param evt
     */
    private void btnIslemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIslemActionPerformed

        kullanilanYil = Integer.parseInt(yilCombo.getSelectedItem().toString() ) ;
        
        if (loginCookies != null && !loginCookies.isEmpty() && girisYapilanKullaniciAdi.equalsIgnoreCase(kullaniciAdi)) {

            //String login = logIn();
            if (okunacakExcel != null && okunacakExcel.isFile() && oturumAcikMi) {

                islemMesaj += "Ýþlem Baþladý !\n Biraz zaman alabilir lütfen bekleyiniz !\n";
                txtMesaj.setText(islemMesaj);

                FileInputStream fis;
                try {
                    fis = new FileInputStream(okunacakExcel);

                    XSSFWorkbook myWorkBook = null;
                    try {
                        myWorkBook = new XSSFWorkbook(fis);
                    } catch (Exception e) {
                        islemMesaj += "Excel Sayfasý Okunamadý !\n";
                    }

                    String pozNoSutun, konuSutun, adetSutun;

// Return first sheet from the XLSX workbook 
                    XSSFSheet mySheet = myWorkBook.getSheetAt(0);
// Get iterator to all the rows in current sheet 
                    Iterator<Row> rowIterator = mySheet.iterator();

                    Row row = rowIterator.next(); // satir basliklari
// Traversing over each row of XLSX file 
                    while (rowIterator.hasNext()) {
                        row = rowIterator.next(); // ilk satir
// For each row, iterate through each columns 
                        // Iterator<Cell> cellIterator = row.cellIterator();
                        pozNoSutun = row.getCell(0).toString();
                        konuSutun = row.getCell(1).toString();
                        adetSutun = row.getCell(2).toString();
                        //while (cellIterator.hasNext()) {
                        //Cell cell = cellIterator.next();
                        String digerBirimFiyat = birimFiyatDetayGetir(pozNoSutun, konuSutun, adetSutun);

                        /*
                        switch (pozNoSutun.getCellType()) {
                            case Cell.CELL_TYPE_STRING:

                                System.out.println(pozNoSutun.getStringCellValue() + "\t");

                                //  String birimFiyat = birimFiyatGetir(pozNoSutun.getStringCellValue());
                                String digerBirimFiyat = birimFiyatDetayGetir(pozNoSutun.getStringCellValue(), konuSutun.getStringCellValue(), adetSutun.getStringCellValue());

                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                System.out.print(pozNoSutun.getNumericCellValue() + "\t");
                                break;
                            case Cell.CELL_TYPE_BOOLEAN:
                                System.out.print(pozNoSutun.getBooleanCellValue() + "\t");
                                break;
                            default:
                        }*/
                        // }
                        System.out.println("");
                    }

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    islemMesaj += " Excel Çalýþma Sayfasý Okunamadý !\n";
                } catch (IOException ex) {

                    islemMesaj += " File IOException  !\n";
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    JOptionPane.showMessageDialog(null, "ÝÞLEM TAMAMLANDI ! \n", "Bilgilendirme", JOptionPane.INFORMATION_MESSAGE);

                    islemMesaj += "ÝÞLEM TAMAMLANDI ! \n";

                    txtMesaj.setText(islemMesaj);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Oturum açýk olduðundan ve okunacak/yazýlacak excel dosyalarýný seçtiðinizden emin olunuz ! \n", "HATA", JOptionPane.ERROR_MESSAGE);

                islemMesaj += "Oturum açýk olduðundan ve okunacak/yazýlacak excel dosyalarýný seçtiðinizden emin olunuz ! \n";

                txtMesaj.setText(islemMesaj);
            }

            //cikisYap();
        } else {
            JOptionPane.showMessageDialog(null, "Oturum açtýðýnýzdan emin olunuz ! \n", "HATA", JOptionPane.ERROR_MESSAGE);

            islemMesaj += "Oturum açtýðýnýzdan emin olunuz ! \n";

            txtMesaj.setText(islemMesaj);
        }
    }//GEN-LAST:event_btnIslemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        cikisYap();
        oturumAcikMi = false;
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        loginForm lF = new loginForm(kullaniciAdi, sifre);

        lF.setEnabled(true);
        lF.setVisible(true);
        this.setEnabled(false);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * !! KULLANILMIYOR !! Get ile istekte bulunup birim ilgili poz numarasýna
     * ait ürün için birim fiyat getirecek.
     *
     * @param pozNo : excelden okunan poz numarasi degeri string
     * @return : poz numarasýna göre get ile istekten dönen birim fiyat bilgisi
     * string olarak döndürülür.
     */
    public String birimFiyatGetir(String pozNo, String konu, String miktar) {

        String birimFiyat = "-";
        Boolean basariliMi = false;
        String url = siteUrl + aramaUrl;
        String result = " \n";

        try {
            Connection.Response docx = Jsoup.connect(siteUrl + aramaUrl)
                    .method(Connection.Method.GET)
                    .cookies(loginCookies)
                    .execute();

            System.out.println(docx);

            aramaCookies = docx.cookies();
            detayPozNo = pozNo;

            URL obj = new URL(url);

            Document doc = Jsoup.connect(url)
                    .data("cookieexists", "false")
                    .data("DetayPozNo", "")
                    .data("Yil", String.valueOf(kullanilanYil))
                    .data("PozTipi", "-1")
                    .data("PozNo", detayPozNo)
                    .data("Tanim", "")
                    .data("TumAlan", "")
                    .userAgent("Mozilla")
                    .timeout(0)
                    .cookies(aramaCookies)
                    .post();

            System.out.println(doc);

            if (doc != null) {
                Element table = doc.getElementById("icerik");

                if (table != null && table.text().length() > 0) {

                    Elements sutunlar = table.select("td");

                    for (Element sutun : sutunlar) {
                        if (sutun.text().trim().equalsIgnoreCase(detayPozNo)) {
                            basariliMi = true;
                            break;
                        }
                    }
                    if (basariliMi) {
                        result = "Poz No : " + detayPozNo + " detay bulundu !\n";
                        birimFiyat = birimFiyatDetayGetir(detayPozNo, konu, miktar);

                        System.out.println("Arama Ekraný - Poz No : " + detayPozNo + " Birim Fiyat : " + birimFiyat + "\n");
                    } else {
                        result = "Sonuç (Detay) BULUNAMADI ! Poz No : " + detayPozNo + "\n";
                    }
                } else {
                    result = " Birim Fiyat Okunamadý ! Poz No :  " + detayPozNo + "\n";
                }

            } else {
                result = " Birim Fiyat Okunamadý ! Poz No :  " + detayPozNo + "\n";
            }
        } catch (Exception e) {
            result = " HATA(101) - BÝRÝM FÝYAT OKUMA ÝÞLEMÝ BAÞARISIZ !";
            System.out.println(e.getMessage());
            result += e.getMessage() + "\n";
        } finally {
            islemMesaj += " Birim Fiyat Okuma Ýþlemi " + result;
            txtMesaj.setText(islemMesaj);
        }

        return birimFiyat;

    }

    /**
     *
     * @param yazilacakData : String dizi olarak alýnýr. Satir no, poz no, konu
     * miktar birim fiyat içerir
     * @param yazilacakDosya : yazilacak excel dosyasinin file tipindeki tanimi
     * @param param : 0: baslik, 1:icerik
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
    public String writeExcel(String[] yazilacakData, File yazilacakDosya, int param) throws FileNotFoundException, IOException {

        String sonuc = "";

        FileOutputStream out = new FileOutputStream(yazilacakDosya);

        // Dosya yeni olusturulmus o halde baslik sutunlarini direk dosyay yaz ve
        // dosya icerigini temizle.
        if (param == 0) {

            Set<String> keyset = data.keySet();

            int rownum = yazilacakExcelSayfasi.getPhysicalNumberOfRows(); // or sheet.getLastRowNum();

            for (String key : keyset) {
                Row row = yazilacakExcelSayfasi.createRow(rownum++);
                Object[] objArr = data.get(key);
                int cellnum = 0;
                for (Object obj : objArr) {
                    Cell cell = row.createCell(cellnum++);
                    if (obj instanceof String) {
                        cell.setCellValue((String) obj);
                    } else if (obj instanceof Integer) {
                        cell.setCellValue((Integer) obj);
                    }
                }
            }

            yazilacakExcel.write(out);
            out.close();
            data.clear();

            islemMesaj += "Excel baþlýklarý eklendi ! \n";
        } else {
            data.clear();
            data.put(String.valueOf(yazilacakExcelSayfasi.getPhysicalNumberOfRows()), yazilacakData);

            //Iterate over data and write to sheet
            Set<String> keyset = data.keySet();

            int rownum = yazilacakExcelSayfasi.getPhysicalNumberOfRows(); // or sheet.getLastRowNum();
            // int rownum = 0;

            for (String key : keyset) {
                Row row = yazilacakExcelSayfasi.createRow(rownum++);
                Object[] objArr = data.get(key);
                int cellnum = 0;
                for (Object obj : objArr) {
                    Cell cell = row.createCell(cellnum++);
                    if (obj instanceof String) {
                        cell.setCellValue((String) obj);
                    } else if (obj instanceof Integer) {
                        cell.setCellValue((Integer) obj);
                    }
                }
            }
            try {
                yazilacakExcel.write(out);
                out.close();

                sonuc = yazilacakDosya.getAbsolutePath() + " dosyasina basariyla yazildi !\n";
                islemMesaj += sonuc;
                System.out.println(yazilacakDosya.getAbsolutePath() + "   basariyla yazildi !\n");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        txtMesaj.setText(islemMesaj);
        return sonuc;

    }

    /**
     * GERCEK ÝS YAPAN METHOD
     * arama sayfasinda gelen sonuuca
     *
     * @param detayPozNo : detay poz numarasi
     * @return birimfiyat
     */
    public String birimFiyatDetayGetir(String detayPozNo, String konu, String miktar) throws IOException {

        String birimFiyat = "-";
        String maxBirimFiyat = "-";

        String[] data = new String[6];

        String arananPozNo;
        Boolean basariliMi = false;

        String url = siteUrl + aramaDetayUrl;
        String result = " \n";

        File yeniolustur = new File(okunacakExcel.getParent() + "/yeni_csb_birim_fiyat_" + kullanilanYil + ".xlsx");

        if (yeniolustur.exists()) {
            //System.out.println("Dosya zaten var !\n");
            //islemMesaj += "Dosya zaten var ! \n";
            yazilacakExcelFile = yeniolustur;
        } else if (yeniolustur.createNewFile()) {
            yazilacakExcelFile = yeniolustur;
            // dosya ilk olusturuldugunda basliklari yazsin.
            writeExcel(data, yazilacakExcelFile, 0);

        } else {
            System.out.println("Dosya olusturulamadi !\n");
            islemMesaj += "Dosya Olusturulamadi ! \n";
        }

        try {
            arananPozNo = detayPozNo;

            Document doc = Jsoup.connect(url)
                    .data("DetayPozNo", arananPozNo)
                    .data("Yil", String.valueOf(kullanilanYil))
                    .data("PozTipi", "-1")
                    .data("PozNo", arananPozNo)
                    .data("Tanim", "")
                    .data("TumAlan", "")
                    .userAgent("Mozilla")
                    .timeout(0)
                    .cookies(loginCookies)
                    .post();

            // System.out.println(doc);
            if (doc != null) {
                Elements tables = doc.select("table.table.table-striped");

                Elements satirlar = tables.get(1).select("tr");

                for (Element satir : satirlar) {

                    Elements sutunlar = satir.select("td");

                    if (sutunlar.get(0).text().trim().equalsIgnoreCase(String.valueOf(kullanilanYil))) {

                        basariliMi = true;
                        maxBirimFiyat = sutunlar.get(1).text();
                        birimFiyat = sutunlar.get(2).text();

                        data[0] = String.valueOf(indis);
                        data[1] = arananPozNo;
                        data[2] = konu;
                        data[3] = miktar;
                        data[4] = String.valueOf(maxBirimFiyat);
                        data[5] = String.valueOf(birimFiyat);

                        writeExcel(data, yazilacakExcelFile, 1);

                        //System.out.println("Detay Arama Ekraný - Poz No : " + arananPozNo + " Konu : " + konu + " Birim Fiyat : " + birimFiyat + " Max Birim Fiyat : " + maxBirimFiyat + "\n");
                        islemMesaj += "Detay Arama Ekraný - Poz No : " + arananPozNo + " Konu : " + konu + " Birim Fiyat : " + birimFiyat + " Max Birim Fiyat : " + maxBirimFiyat + "\n";

                        indis++;
                    }
                    if (basariliMi) {
                        break;
                    }
                }
                if (basariliMi) {
                    result = maxBirimFiyat + "#" + birimFiyat;
                } else {
                    result = "Sonuç (Detay) BULUNAMADI ! Poz No : " + arananPozNo + "\n";

                    data[0] = String.valueOf(indis);
                    data[1] = arananPozNo;
                    data[2] = konu;
                    data[3] = miktar;
                    data[4] = kullanilanYil+" Ýçin Fiyat Belirlenmemiþ !";
                    data[5] = kullanilanYil+" Ýçin Fiyat Belirlenmemiþ !";

                    writeExcel(data, yazilacakExcelFile, 1);
                    indis++;
                }
            } else {
                result = " Birim Fiyat Okunamadý ! Poz No :  " + arananPozNo + "\n";
            }
        } catch (Exception e) {
            result = " HATA(101) - BÝRÝM FÝYAT OKUMA ÝÞLEMÝ BAÞARISIZ !";

            result = "Sonuç (Detay) BULUNAMADI ! Poz No : " + detayPozNo + "\n";

            data[0] = String.valueOf(indis);
            data[1] = detayPozNo;
            data[2] = konu;
            data[3] = miktar;
            data[4] = " ! SONUÇ YOK !";
            data[5] = " ! SONUÇ YOK !";

            writeExcel(data, yazilacakExcelFile, 1);
            indis++;

            System.out.println(e.getMessage());
            result += e.getMessage() + "\n";
        } finally {
            islemMesaj += result + "\nBirim Fiyat Okuma Ýþlemi " + result + "\n";
            txtMesaj.setText(islemMesaj);
        }

        return result;
    }

    /**
     * Proxy ayarlarinin yapilacaði method.
     */
    public void setProxySettings() {
        //System.setProperty("http.proxySet","true");
        System.setProperty("http.proxyHost", "btsproxy");
        System.setProperty("http.proxyPort", "8080");

        islemMesaj += "Proxy ayarlari yapýldý !\n";

        txtMesaj.setText(islemMesaj);
    }

    /**
     * Sisteme giris yapmak icin giris sayfasina post istekte bulunan method
     *
     * @return 1:BASARILI, 0 HATALI
     */
    public String logIn() throws MalformedURLException {

        String sonuc = "";
        String url = siteUrl + logInUrl;

        if (!oturumAcikMi && loginCookies == null) {

            try {
                Connection.Response respGet = Jsoup.connect(url)
                        .timeout(0)
                        .userAgent("Mozilla")
                        // and other hidden fields which are being passed in post request.
                        .method(Connection.Method.GET)
                        .execute();

                loginCookies = respGet.cookies();
            } catch (Exception c) {
                System.out.println("HATA : " + c.getMessage() + " Trace : " + c.getStackTrace());

                islemMesaj += "Sayfaya ulaþýlamýyor !\n";

            }

            try {

                Connection.Response resp = Jsoup.connect(url)
                        .data("KullaniciAdi", kullaniciAdi)
                        .data("Sifre", sifre)
                        .data("gonder", gonder)
                        .timeout(0)
                        .userAgent("Mozilla")
                        .cookies(loginCookies)
                        // and other hidden fields which are being passed in post request.
                        .method(Connection.Method.POST)
                        .execute();

                if (loginCookies == null || loginCookies.isEmpty()) {
                    loginCookies = resp.cookies();
                }

                Document doc = resp.parse();
                // System.out.println(doc);

                if (doc != null) {
                    Element context = doc.getElementById("menu");

                    if (context != null && context.text().length() > 0) {

                        Elements links = doc.select("a[href]");

                        Element arananLink = null;

                        for (Element link : links) {
                            System.out.println("Link : " + link);

                            if (link.attr("href").equalsIgnoreCase(anasayfaUrl)) {
                                System.out.println("Kullanýcý Adý >> " + link.text());
                                arananLink = link;
                                break;
                            }
                        }

                        // sisteme belirledigimiz kullanici adi ile girilmis ise,
                        if (arananLink.text().equalsIgnoreCase(kullaniciAdi)) {
                            sonuc = arananLink.text().trim();
                            girisYapilanKullaniciAdi = sonuc;
                            islemMesaj += girisYapilanKullaniciAdi + " kullanýcý adý ile giriþ yapýldý ! \n";
                        } else {
                            sonuc = "Kullanici Adi veya Þifre HATALI !";
                            islemMesaj += "Kullanici Adi veya Þifre HATALI !";
                            //cikisYap();
                        }

                        if (context != null) {
                            Elements uller = context.select("ul.navbar-nav");// .getElementsByClass("nav navbar-nav");

                            if (uller != null) {
                                Elements tags = uller.first().getElementsByTag("a");

                                System.out.println("Tags Text : " + tags.text());

                                sonuc = tags.text();
                            }
                        }
                    } else {
                        sonuc = "Ýçerik okunamadý - Ayný anda oturum açýlmak isteniyor olabilir !\n";
                        islemMesaj += sonuc;
                        System.out.println("Hata-2 : " + sonuc);
                    }
                } else {

                    //cikisYap();
                    sonuc = "\nDöküman okunamadý !\n";
                    islemMesaj += sonuc;
                    System.out.println("Hata-1 : " + sonuc);
                }

                oturumAcikMi = true;

            } catch (Exception e) {

                islemMesaj += "Kullanýcý adý ve/veya þifre hatalý olabilir.!\nKontrol ettikten sonra tekrar deneyiniz. !\n";
                //cikisYap();
                System.out.println(e.getMessage());
                sonuc = e.getMessage();
                // hataya duserse sistemden cikis yap !
            } finally {
                txtMesaj.setText(islemMesaj);
            }
        }

        return sonuc;
    }

    /**
     * Sistemden güvenli çýkýþ yapýlmasýný saðlar. Daha sonra tekrar açýldýðýnda
     * oturum açmak icin problem yasanmamasi icin.
     */
    public void cikisYap() {

        String url = siteUrl + cikisUrl;

        String result = " BAÞARILI !\n";

        try {

            Connection.Response resp = Jsoup.connect(url)
                    .cookies(loginCookies)
                    .userAgent("Mozilla")
                    .timeout(0)
                    .method(Connection.Method.GET)
                    .execute();

            Document doc = resp.parse();

            System.out.println(doc);

            String baseUri = doc.baseUri();

            if (baseUri.equalsIgnoreCase(siteUrl + "index.php")) {
                result = " BAÞARILI !\n";
            }
            oturumAcikMi = false;

        } catch (Exception e) {
            result = " BAÞARISIZ ! \n";
            System.out.println(e.getMessage());
            result += e.getMessage();
        } finally {
            islemMesaj += "Çýkýþ Ýþlemi " + result;
            txtMesaj.setText(islemMesaj);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDosyaSec;
    private javax.swing.JButton btnIslem;
    private javax.swing.JButton btnOturumAc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDosyaAdi;
    private javax.swing.JTextArea txtMesaj;
    private java.awt.Choice yilCombo;
    // End of variables declaration//GEN-END:variables
}
